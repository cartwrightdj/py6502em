;
; File generated by cc65 v 2.19 - Git b75f872
;
	.fopt		compiler,"cc65 v 2.19 - Git b75f872"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_input
	.import		_get_proc_state_base
	.import		_printf
	.import		_strcmp
	.import		_strtok
	.export		_get_proc_state
	.export		_proc_table
	.export		_main
	.export		_hwirq

.segment	"RODATA"

S0002:
	.byte	$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D
	.byte	$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D
	.byte	$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D,$2D
	.byte	$2D,$2D,$2D,$2D,$0D,$0A,$00
S0003:
	.byte	$49,$44,$20,$20,$50,$52,$4E,$54,$20,$20,$20,$20,$53,$54,$20,$20
	.byte	$4C,$4F,$20,$48,$49,$0D,$0A,$00
S0004:
	.byte	$25,$68,$75,$09,$25,$68,$75,$09,$25,$68,$75,$09,$25,$68,$75,$09
	.byte	$25,$68,$75,$0D,$0A,$00
S0001:
	.byte	$09,$09,$50,$72,$6F,$63,$65,$73,$73,$20,$54,$61,$62,$6C,$65,$0D
	.byte	$0A,$00
S0010:
	.byte	$41,$72,$67,$3A,$20,$25,$73,$20,$00
S0007:
	.byte	$43,$6D,$64,$3A,$20,$25,$73,$20,$00
S000D	:=	S0010+0
S000A	:=	S0010+0
S0005:
	.byte	$0D,$24,$3A,$20,$00
S000B:
	.byte	$20,$09,$0A,$00
S0008	:=	S000B+0
S000E	:=	S000B+0
S000C	:=	S0002+52
S000F	:=	S0002+52
S0012:
	.byte	$50,$54,$00
S0011	:=	S0002+52
S0009	:=	S0002+52
S0006	:=	S0010+7

.segment	"BSS"

_cmd:
	.res	1,$00
_cmd_asc:
	.res	2,$00
_arg1:
	.res	2,$00
_arg2:
	.res	2,$00
_arg3:
	.res	2,$00
_args:
	.res	2,$00

; ---------------------------------------------------------------
; struct proc_state *__near__ get_proc_state (int index)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_proc_state: near

.segment	"CODE"

	jsr     pushax
	jsr     _get_proc_state_base
	jsr     pushax
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	ldy     #$05
	jsr     ldaxysp
	jsr     mulax9
	jsr     aslax1
	jsr     tosaddax
	jmp     L0001
L0001:	jsr     incsp4
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ proc_table (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_proc_table: near

.segment	"CODE"

	jsr     decsp3
	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	lda     #$00
	ldy     #$00
	sta     (sp),y
L0002:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$09
	jsr     boolult
	jne     L0005
	jmp     L0003
L0005:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     _get_proc_state
	ldy     #$01
	jsr     staxysp
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$06
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	jsr     pushax
	ldy     #$08
	jsr     ldaxysp
	ldy     #$01
	jsr     ldauidx
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	ldy     #$02
	jsr     ldauidx
	jsr     pushax
	ldy     #$0C
	jsr     ldaxysp
	ldy     #$03
	jsr     ldauidx
	jsr     pushax
	ldy     #$0C
	jsr     _printf
	ldy     #$00
	ldx     #$00
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
	jmp     L0002
L0003:	ldx     #$00
	lda     #$00
	jmp     L0001
L0001:	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ get_command (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_command: near

.segment	"CODE"

	jsr     decsp2
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     _input
	ldy     #$00
	jsr     staxysp
	ldy     #$01
	jsr     ldaxysp
	jsr     pushax
	lda     #<(S0006)
	ldx     #>(S0006)
	jsr     _strtok
	sta     _cmd_asc
	stx     _cmd_asc+1
	lda     #<(S0007)
	ldx     #>(S0007)
	jsr     pushax
	lda     _cmd_asc
	ldx     _cmd_asc+1
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldx     #$00
	lda     #$00
	jsr     pushax
	lda     #<(S0008)
	ldx     #>(S0008)
	jsr     _strtok
	sta     _arg1
	stx     _arg1+1
	lda     _arg1
	ldx     _arg1+1
	jsr     bnegax
	jeq     L0002
	lda     #<(S0009)
	ldx     #>(S0009)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0001
L0002:	lda     #<(S000A)
	ldx     #>(S000A)
	jsr     pushax
	lda     _arg1
	ldx     _arg1+1
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldx     #$00
	lda     #$00
	jsr     pushax
	lda     #<(S000B)
	ldx     #>(S000B)
	jsr     _strtok
	sta     _arg2
	stx     _arg2+1
	lda     _arg2
	ldx     _arg2+1
	jsr     bnegax
	jeq     L0003
	lda     #<(S000C)
	ldx     #>(S000C)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0001
L0003:	lda     #<(S000D)
	ldx     #>(S000D)
	jsr     pushax
	lda     _arg2
	ldx     _arg2+1
	jsr     pushax
	ldy     #$04
	jsr     _printf
	ldx     #$00
	lda     #$00
	jsr     pushax
	lda     #<(S000E)
	ldx     #>(S000E)
	jsr     _strtok
	sta     _arg3
	stx     _arg3+1
	lda     _arg3
	ldx     _arg3+1
	jsr     bnegax
	jeq     L0004
	lda     #<(S000F)
	ldx     #>(S000F)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0001
L0004:	lda     #<(S0010)
	ldx     #>(S0010)
	jsr     pushax
	lda     _arg3
	ldx     _arg3+1
	jsr     pushax
	ldy     #$04
	jsr     _printf
	lda     #<(S0011)
	ldx     #>(S0011)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0001
L0001:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     decsp4
	ldx     #$00
	lda     #$42
	jsr     pushax
	jsr     _proc_table
	jmp     L0005
L0002:	jsr     _get_command
	lda     _cmd_asc
	ldx     _cmd_asc+1
	jsr     pushax
	lda     #<(S0012)
	ldx     #>(S0012)
	jsr     _strcmp
	cpx     #$00
	bne     L0006
	cmp     #$00
L0006:	jsr     booleq
	jeq     L0005
	jsr     _proc_table
L0005:	jmp     L0002
	ldx     #$00
	lda     #$00
	jmp     L0001
L0001:	rts

.endproc

; ---------------------------------------------------------------
; int __near__ hwirq (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hwirq: near

.segment	"CODE"

	sei
	rti
	ldx     #$00
	lda     #$00
	rts

.endproc

